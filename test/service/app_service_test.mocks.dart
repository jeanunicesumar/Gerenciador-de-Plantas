// Mocks generated by Mockito 5.4.4 from annotations
// in gerenciador_planta/test/service/app_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:gerenciador_planta/models/planta.dart' as _i2;
import 'package:gerenciador_planta/service/app_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlanta_0 extends _i1.SmartFake implements _i2.Planta {
  _FakePlanta_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppService extends _i1.Mock implements _i3.AppService {
  @override
  _i4.Future<List<_i2.Planta>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Planta>>.value(<_i2.Planta>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Planta>>.value(<_i2.Planta>[]),
      ) as _i4.Future<List<_i2.Planta>>);

  @override
  _i4.Future<_i2.Planta> findById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Planta>.value(_FakePlanta_0(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Planta>.value(_FakePlanta_0(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Planta>);

  @override
  _i4.Future<_i2.Planta> create(_i2.Planta? planta) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [planta],
        ),
        returnValue: _i4.Future<_i2.Planta>.value(_FakePlanta_0(
          this,
          Invocation.method(
            #create,
            [planta],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Planta>.value(_FakePlanta_0(
          this,
          Invocation.method(
            #create,
            [planta],
          ),
        )),
      ) as _i4.Future<_i2.Planta>);
}
